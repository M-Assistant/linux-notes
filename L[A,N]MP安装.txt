L[A,N]MP安装

一，安装Apache
前言：由于使用的是源码安装apache,所以再安装之前需要安装某些依赖软件包。

1，下载软件包
[root@centos7 ~]# wget http://mirrors.tuna.tsinghua.edu.cn/apache//httpd/httpd-2.2.34.tar.gz
[root@centos7 ~]# wget http://mirror.bit.edu.cn/apache//apr/apr-1.6.3.tar.gz
[root@centos7 ~]# wget http://mirror.bit.edu.cn/apache//apr/apr-util-1.6.1.tar.gz
[root@centos7 ~]# wget http://www.zlib.net/zlib-1.2.11.tar.gz

2，安装软件
[root@centos7 ~]# yum -y install gcc autoconf automake make pcre \
> pcre-devel openssl openssl-devel expat expat-devel
[root@centos7 ~]# tar -zxvf httpd-2.2.34.tar.gz -C /usr/src
[root@centos7 ~]# tar -zxvf apr-1.6.3.tar.gz -C /usr/src
[root@centos7 ~]# tar -zxvf apr-util-1.6.1.tar.gz -C /usr/src
[root@centos7 ~]# tar -zxvf zlib-1.2.11.tar.gz -C /usr/src

[root@centos7 ~]# cd /usr/src/zlib-1.2.11
[root@centos7 ~]# ./configure
[root@centos7 ~]# make && make install

[root@centos7 ~]# cd /usr/src/apr-1.6.3
[root@centos7 ~]# ./configure --with-apr=/usr/local/apr
[root@centos7 ~]# make && make install

[root@centos7 ~]# cd /usr/src/apr-util-1.6.1
[root@centos7 ~]# ./configure
[root@centos7 ~]# make && make install

[root@centos7 ~]# cd /usr/src/httpd-2.2.34
[root@centos7 ~]# ./configure --prefix=/usr/local/apache2 \		# 指定Apache httpd程序安装主目录
> --enable-so \													# 开启模块化功能，支持DSO（动态共享对象）
> --enable-ssl \												# 支持SSL加密
> --enable-rewrite \											# 支持地址重写
> --with-mpm=worker \											# 设置Apache httpd工作模式
> --with-suexec-bin \											# 支持SUID、SGID
> --with-apr=/usr/local/apr/									# 指定apr程序绝对路径
[root@centos7 ~]# make && make install

注：源码软件包中的configure 脚本用来检查系统环境、查找依赖文件、设置安装路径等操作,
configure拥有很多选项，可以通过./configure --help查看该脚本支持的所有选项

3，启动服务
[root@centos7 ~]# /usr/local/apache2/bin/apachectl start		# 启动Apache
[root@centos7 ~]# netstat -luntp | grep http					# 查看进程
[root@centos7 ~]# firewall-cmd --permanent --add-port=80/tcp	# 配置防火墙，开放80端口
[root@centos7 ~]# firewall-cmd --reload							# 重新加载防火墙配置

安装完成后，Apache会提供名为apachectl启动脚本，脚本在/usr/localapache2/bin 目录下，
该脚本用来进行Apache httpd启动、关闭及测试功能。

注：若在没有修改配置文件的情况下启动apache，可能会返回错误提示：
"Could not reliably determine the server's fully qualified domain name"
提示说明httpd无法确定服务器域名称，可以修改主配置文件的ServerName项来解决。
例如：ServerName localhost


apachectl脚本参数：
start				启动httpd程序
stop				关闭httpd程序
restart				重启httpd程序
status				查看httpd程序状态
configtest			检查httpd主配置文件语法
graceful			启动httpd,不中断现有的http链接请求
graceful-stop		关闭httpd,不中断现有的http链接请求


二，安装Nignx

1，Nginx软件安装

1) 下载软件包
[root@centos7 ~]# wget http://nginx.org/download/nginx-1.13.6.tar.gz



2) 安装软件
[root@centos7 ~]# yum -y install perl perl-ExtUtils-Embed gd gd-devel \
zlib-devel openssl openssl-devel gcc pcre pcre-devel
[root@centos7 ~]# cd /usr/src/nginx-1.13.6/
[root@centos7 ~]# ./configure --prefix=/usr/local/nginx \
--with-http_ssl_module \
--with-http_realip_module \
--with-http_addition_module \
--with-http_flv_module \
--with-http_mp4_module \
--with-http_gzip_static_module \
--with-http_perl_module \
--with-mail \
--with-mail_ssl_module
[root@centos7 ~]# make && make install

Nginx与Apache一样都采用的是模块化设置，Nginx模块分为内痔模块和第三方模块，其中，
内置模块中包括主模块与事件模块。在编译时，会自动编译默认模块，可以使用--without参数
禁用某些模块，也可以使用--add-module=/path/modulel 的方式编译第三方模块。

默认编译模块如下：
模块名称				描述						禁用选项
Core				Nginx核心功能					--without-http
Access				基于IP的访问控制				--without-http_access_module
Auth Basic			HTTP用户认证模块				--without-http_auth_basic_module
Auto Index			自动目录索引					--without-http_autoindex_module
Browser				描述用户代理					--without-http_browser_module
Cahrset				重新编码网页					--without-http_charset_module
Empty GIF			内存中存放一个图片				--without-http_empty_gif_module
FastCGI				FastCGI支持						--without-http_fastcgi_module
Geo					支持IP变量设置					--without-http_geo_module
Gzip				Gzip压缩						--without-http_gzip_module
Limit Requests		限制客户端连接频率				--without-http_limit_req_module
Limit Conn			会话得并发连接					--without-http_limit_conn_module
Map					设置变量						--without-http_map_module
Memcached			Memcahce支持					--without-http_memcached_module
Referer				基于Referer头部信息过滤			--without-http_referer_module
Rewrite				使用正则表达式重写请求			--without-http_rewrite_module
SCGI				支持SCGI协议					--without-http_scgi_module
Upstream			负载均衡						--without-http_upstream_ip_hash_module
Headers				设置http相应的头部信息
Index				首页
Log					自定义日志


内置模块的附加模块，需要在编译时使用--with参数手动开启：
模块名称				描述							开启选项
Embedded Perl			支持Perl					--with-http_perl_module
FLV						支持Flash视频				--with-http_flv_module
GeoIP					通过IP变量实现负载均衡		--with-http_geoip_module
Google Perftools		支持谷歌的性能优化工具		--with-google_perftools_module
Gzip Precompression		压缩静态文件				--with-http_gzip_static_module
Image Filter			转换图形的过滤器			--with-http_iamge_filter_module
MP4						支持MP4						--with-http_mp4_module
Real IP					使用Nginx作为后端服务器		--with-http_realip_module
Secure Link				使用密钥保护页面			--with-http_secure_link_module
SSL						支持HTTPS/SSL				--with-http_ssl_module
Stub Status				查看服务器状态				--with-http_stub_status_module
WebDAV					支持WebDAV					--with-http_dav_module
Core					邮件代理功能				--with-mail
													--with-mail_pop3_module
													--with-mail_imap_module
													--with-mail_smtp_module
SSL						支持SSL/TLS加密邮件协议		--with-mail_ssl_module



3) 启动Nginx服务
	Nginx安装完成后，程序主目录位于/usr/local/nginx/，该目录下的内容分别
为conf(主配置目录)，html(网站根目录)，logs(日志文件目录)，sbin(主程序目录)。
Nginx默认没有提供启动脚本，需要手动输入命令来管理进程，如果需要更加方便的操作
服务器进程，建议将常用的进程管理任务写成脚本。

Nginx常用的进程管理指令：
[root@centos7 ~]# /usr/local/nginx/sbin/nginx				# 启动主程序
[root@centos7 ~]# /usr/local/nginx/sbin/niginx -c \
> /usr/local/nginx/conf/nginx.conf							# 指定配置文件启动主程序
[root@centos7 ~]# /usr/local/nginx/sbin/nginx -s stop		# 关闭主程序
[root@centos7 ~]# /usr/local/nginx/sbin/nginx -s reload		# 重新加载设置


Nginx会将进程号保存在/usr/local/nginx/logs/nginx.pid文件中，我们可以使用kill指令
发送信号给该进程。

常用信号列表：
信号名称		描述
TERM,INT		快速关闭
QUIT			优雅的关闭，保持现有的客户端连接
HUP				重启应用新的配置文件
USR1			重新打开日志文件
USR2			升级程序
WINCH			优雅的关闭工作进程

例如：
[root@centos7 ~]# kill -QUIT `cat /usr/local/nginx/logs/nginx.pid`
[root@centos7 ~]# kill -HUP `cat /usr/local/nginx/logs/nginx.pid`


2，配置文件解析
#设置用户组
#user  nobody;
#启动子进程数，可以通过ps aux | grep nginx 查看
worker_processes  1;

#错误日志文件，以及日志级别
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
error_log  logs/error.log  info;

#进程号保存文件
pid        logs/nginx.pid;

events {
    #每个进程可以处理的连接数，受系统文件句柄的限制
    worker_connections  1024;
}

http {
    #mime.types 为文件类型定义文件
    include       mime.types;
    #默认文件类型
    default_type  application/octet-stream;
    #使用log_format可以自定义日志格式，名称为main
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';
    #创建访问日志，格式采用main定义的格式
    #access_log  logs/access.log  main;

    #是否调用sendfile()进行数据复制，sendfile()复制数据是在内和级别完成的，所以
    #会比一般的read、write更高效
    sendfile        on;
    #开启后服务器的响应头部信息产生独立的数据包发送，即一个响应头信息一个包
    tcp_nopush     on;

    #保持连接的超时时间
    #keepalive_timeout  0;
    keepalive_timeout  65;

    #是否采用压缩功能，将页面压缩后传输更节省流量
    gzip  on;

    #使用server定义虚拟机
    server {
        #服务器监听的端口
        listen       80;

        #访问域名
        server_name  localhost;
        #编码格式，如果网页编码与此设置不同，则将被自动转码
        #charset koi8-r;

        #设置虚拟主机的访问日志
        #access_log  logs/host.access.log  main;

        #对URL进行匹配
        location / {
            #设置网页根路径，使用的是相对路径，html指的是处于Nginx安装路径下
            root   html;
            #首先文件，先找index.html,若没有,再找index.htm
            index  index.html index.htm;
        }

        #设置错误代码对应的错误页面
        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #127.0.0.1服务器，通过proxy_pass可以实现代理功能
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #禁止所有人访问.ht页面
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #定义虚拟主机
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
        #监听TLS使用的443端口
    #    listen       443 ssl;
    #    server_name  localhost;
        #指定文件，使用相对路径证书需要存放在与nginx.conf同目录下
    #    ssl_certificate      cert.pem;
        #指定私钥文件，使用相对路径私钥需要放在与nginx.conf同目录下
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}



3，虚拟主机案例
	需求：创建4个基于域名的虚拟主机，第一个虚拟主机使用www.domain.com以及除web.domain.com
外的所有以domain.com结尾的域名都可以访问，第二个虚拟主机使用web.domain.com访问网站，第三个
虚拟主机使用www.example.com访问，第四个虚拟主机为默认虚拟主机，也就是域名无法匹配以上所有
的域名时，使用该虚拟主机相应客户端请求。
	虚拟主机中最重要的指令是server_name 和 root,分别用来设置域名与网站根路径。

	步骤：
	1) 编辑nginx配置文件
	#设置用户组
	user  nginx;
	#启动子进程数，可以通过ps aux | grep nginx 查看
	worker_processes  1;

	#错误日志文件，以及日志级别
	error_log  logs/error.log  info;

	#进程号保存文件
	pid        logs/nginx.pid;

	events {
		#每个进程可以处理的连接数，受系统文件句柄的限制
		worker_connections  4;
	}

	http {
		#mime.types 为文件类型定义文件
		include       mime.types;
		#默认文件类型
		default_type  application/octet-stream;
		#使用log_format可以自定义日志格式，名称为main
		log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
						  '$status $body_bytes_sent "$http_referer" '
						  '"$http_user_agent" "$http_x_forwarded_for"';
		#创建访问日志，格式采用main定义的格式
		#access_log  logs/access.log  main;

		#是否调用sendfile()进行数据复制，sendfile()复制数据是在内和级别完成的，所以
		#会比一般的read、write更高效
		sendfile        on;
		#开启后服务器的响应头部信息产生独立的数据包发送，即一个响应头信息一个包
		tcp_nopush     on;

		#保持连接的超时时间
		#keepalive_timeout  0;
		keepalive_timeout  65;

		#是否采用压缩功能，将页面压缩后传输更节省流量
		gzip  on;

		# 第一个虚拟主机，使用www.domain.com 或 二级域名*.domain.com 均可访问。
		server {
			listen          80;
			server_name     www.domain.com *.domain.com;
			access_log      logs/www/domain.com.access.log main;
			location / {
				root        html/domain;
				index       index.html index.htm;
			}
	        error_page      500 502 503 504 /50x.html;
			location = /50x.html {
				root        html;
			}
			location ~ /\.ht {
				deny all;
			}
		}

		# 第二个虚拟主机，使用web.domain.com可访问
		server {
			listen          80;
			server_name     web.domain.com;
			localtion / {
				root        html/web;
				index       index.html index.htm;
			}
		}

		# 第三个虚拟主机，使用www.example.com可访问
		server {
			listen          80;
			server_name     www.example.com;
			localtion / {
				root        html/example;
				index       index.html index.htm;
			}
		}
		
		# 第四个虚拟主机，若以上虚拟主机访问不到，则默认访问该虚拟主机
		server {
			listen          80 default_server;
			localtion / {
				root        html/default;
				index       index.html index.htm;
			}
		}
	}

	2) 设置nginx启动用户和组
	[root@centos7 ~]# groupadd nginx
	[root@centos7 ~]# useradd -M -s /sbin/nologin -g nginx nginx
	
	3) 修改hosts文件
	[root@centos7 ~]# sed -i "`cat /etc/host | wc -l`a 127.0.0.1 web.domain.com" /etc/hosts
	[root@centos7 ~]# sed -i "`cat /etc/host | wc -l`a 127.0.0.1 www.domain.com" /etc/hosts
	[root@centos7 ~]# sed -i "`cat /etc/host | wc -l`a 127.0.0.1 www.example.com" /etc/hosts
	
	4) 为4个虚拟主机创建网页根路径，并为每个网站创建测试用的文件
	[root@centos7 ~]# mkdir /usr/local/nginx/html/{domain,web,example,default}
	[root@centos7 ~]# echo "domain.com" > /usr/local/nginx/html/domain/index.html
	[root@centos7 ~]# echo "web.domain.com" > /usr/local/nginx/html/web/index.html
	[root@centos7 ~]# echo "example.com" > /usr/local/nginx/html/example/index.html
	[root@centos7 ~]# echo "default" > /usr/local/nginx/html/default/index.html
	
	如果为客户端提供DNS域名解析后，即可实现基于域名的虚拟主机功能，Nginx会根据不同的域名
请求响应不同的网站页面。如果没有DNS解析，可以通过修改hosts文件的方式实现。
	

4，SSL网站应用案例
	默认情况下，SSL模块是不被编译的，如果需要部署SSL网站，需要在编译Nginx时使用--with-http_ssl_module
参数，而编译该模块需要OpenSSL库文件，一般需要安装openssl 与 openssl-devel软件。
	
	下面演示一个简单的Nginx部署SSL网站的流程：
	步骤：
	1) 配置nginx.conf文件
		[root@centos7 ~]# vim /usr/local/nginx/conf/nginx.conf
		#设置用户组
		user  nginx;
		#启动子进程数，可以通过ps aux | grep nginx 查看
		worker_processes  1;

		#错误日志文件，以及日志级别
		#error_log  logs/error.log;
		#error_log  logs/error.log  notice;
		error_log  logs/error.log  info;

		#进程号保存文件
		pid        logs/nginx.pid;


		events {
			#每个进程可以处理的连接数，受系统文件句柄的限制
			worker_connections  1024;
		}


		http {
			#mime.types 为文件类型定义文件
			include       mime.types;
			#默认文件类型
			default_type  application/octet-stream;
			#使用log_format可以自定义日志格式，名称为main
			log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
							  '$status $body_bytes_sent "$http_referer" '
							  '"$http_user_agent" "$http_x_forwarded_for"';
			#创建访问日志，格式采用main定义的格式
			#access_log  logs/access.log  main;

			#是否调用sendfile()进行数据复制，sendfile()复制数据是在内和级别完成的，所以
			#会比一般的read、write更高效
			sendfile        on;
			#开启后服务器的响应头部信息产生独立的数据包发送，即一个响应头信息一个包
			tcp_nopush     on;

			#保持连接的超时时间
			#keepalive_timeout  0;
			keepalive_timeout  65;

			#是否采用压缩功能，将页面压缩后传输更节省流量
			gzip  on;
			error_page  404     /404.html;
			errpr_page  500 502 503 504 /50x.html;

			server {
				listen                          433 ssl;
				server_name                     www.abc.com;
				ssl_certificate                 cert.pem;
				ssl_certificate_key             cert.key;
				ssl_session_timeout             5m;
				ssl_protocols                   SSLv2 SSLv3 TLSv1;
				ssl_ciphers                     HIGH:!Anull:!MD5;
				ssl_prefer_server_ciphers       on;
				location / {
					root        html;
					index       index.html index.htm;
				}
				location ~ /\.ht {
					deny all;
				}
			}
		}

	2) 使用openssl生成自签名证书
		为了实现网站数据的加密传输，需要为网站创建证书。使用openssl生成自签名
	证书非常简单。
		第一步，使用 openssl genrsa 生成证书私钥文件cert.key，密钥长度为2048B。
		第二步，使用 openssl req 指令 生成自签名证书文件cert.pem，生成证书的过
	程中提示输入证书信息，可以根据自己的实际需要填写这些内容。
		采用加密方式传输数据的HTTPD协议默认使用的端口是443，需要使用防火墙开启
	该TCP协议的443端口。	
		[root@centos7 ~]# cd /usr/local/nginx/conf
		[root@centos7 ~]# openssl genrsa -out cert.key 2048
		[root@centos7 ~]# openssl req -new -x509 -key cert.key -out cert.pem
		You are about to be asked to enter information that will be incorporated
		into your certificate request.
		What you are about to enter is what is called a Distinguished Name or a DN.
		There are quite a few fields but you can leave some blank
		For some fields there will be a default value,
		If you enter '.', the field will be left blank.
		-----
		# 使用**包围的字符，都是手动输入的
		# 输入国名（2个字母）
		Country Name (2 letter code) [XX]:*CN*
		# 州或省名称（全称）
		State or Province Name (full name) []:*Beijing*
		# 地区名称
		Locality Name (eg, city) [Default City]:*Beijing*
		# 姓名公司
		Organization Name (eg, company) [Default Company Ltd]:*ABC*
		# 组织单位名称
		Organizational Unit Name (eg, section) []:*tech*
		# 通用名称（例如，你的名字或你的服务器的主机名）
		Common Name (eg, your name or your server's hostname) []:*jacob*
		# 电子邮件地址
		Email Address []:*jacobxx@gmail.com*

	3) 创建测试文件，并开放443端口
		[root@centos7 ~]# sed -i "`cat /etc/hosts | wc -l`a 127.0.0.1   www.abc.com" /etc/hosts
		[root@centos7 ~]# echo "Error,file not found" > /usr/local/nginx/html/404.html
		[root@centos7 ~]# systemctl restart firewalld.service
		[root@centos7 ~]# firewall-cmd --permanent --add-port=443/tcp
		[root@centos7 ~]# firewall-cmd --reload
		[root@centos7 ~]# /usr/local/nginx/sbin/nginx

		注：服务端启动服务后，可以通过 netstat -luntp | grep nginx 命令查看端口信息。客户端
	配置好DNS解析后，即可通过浏览器访问https://www.abc.com 加密网站，其没有DNS解析，可以通过
	修改hosts的方式实现。由于是自签名证书，使用浏览器访问时会提示证书不被信任，可以将证书导入
	浏览器，使得以后的访问不再提示警告信息。

	
		
5，常见HTTP响应状态码
状态码			含义
100			请求已接受，客户端可以继续发送请求
101			服务器根据客户端的请求切换协议
200			一切正常
201			服务器已经创建了文档
203			已经接受了请求，但处理尚未完成
300			客户端请求的资源可以在多个位置找到
301			客户端请求的资源可以在其他位置找到
305			使用代理服务
400			请求语法错误
401			访问被拒绝
401.1		登陆失败
403			资源不可用
403.6		IP地址被拒绝
403.9		用户数过多
404			无法找到指定资源
406			指定资源已找到，但MIME类型与客户端要求不兼容
407			要求进行代理身份验证
500			服务器内部错误
500.13		服务器太忙
501			服务器不支持客户端的请求功能
502			网关错误
503			服务不可用
504			网关超时，服务器处于维护或者负载过高无法响应
505			服务器不支持客户端请求的HTTP版本







三，安装Mysql
1，下载软件包
[root@centos7 ~]# wget http://ftp.jaist.ac.jp/pub/mysql/Downloads/MySQL-5.6/mysql-5.6.38.tar.gz

2，安装软件
[root@centos7 ~]# yum -y install cmake ncurses-devel libxml2-devel \
> libtool-ltdl-devel gcc-c++ bison zlib-devel gcc autoconf automake
[root@centos7 ~]# groupadd mysql
[root@centos7 ~]# useradd -r -s /sbin/nologin -g mysql mysql
[root@centos7 ~]# cd /usr/src/mysql-5.6.38
[root@centos7 ~]# cmake . -DENABLE_DOWNLOADS=1
[root@centos7 ~]# make && make install
[root@centos7 ~]# chown -R mysql.mysql /usr/local/mysql





























